# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'MainWindow.ui'
##
## Created by: Qt User Interface Compiler version 6.4.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QComboBox, QFrame,
    QGridLayout, QHBoxLayout, QHeaderView, QLabel,
    QLineEdit, QListView, QListWidget, QListWidgetItem,
    QMainWindow, QMenu, QMenuBar, QPushButton,
    QScrollBar, QSizePolicy, QSpacerItem, QSplitter,
    QTabWidget, QTableView, QToolButton, QVBoxLayout,
    QWidget)

from vi.panningwebview import PanningWebView
import resource_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1023, 758)
        icon = QIcon()
        icon.addFile(u":/Icons/icon.ico", QSize(), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.000000000000000)
        self.infoAction = QAction(MainWindow)
        self.infoAction.setObjectName(u"infoAction")
        self.alwaysOnTopAction = QAction(MainWindow)
        self.alwaysOnTopAction.setObjectName(u"alwaysOnTopAction")
        self.alwaysOnTopAction.setCheckable(True)
        self.alwaysOnTopAction.setChecked(False)
        self.opac100 = QAction(MainWindow)
        self.opac100.setObjectName(u"opac100")
        self.opac80 = QAction(MainWindow)
        self.opac80.setObjectName(u"opac80")
        self.opac60 = QAction(MainWindow)
        self.opac60.setObjectName(u"opac60")
        self.opac40 = QAction(MainWindow)
        self.opac40.setObjectName(u"opac40")
        self.opac20 = QAction(MainWindow)
        self.opac20.setObjectName(u"opac20")
        self.chooseChatRoomsAction = QAction(MainWindow)
        self.chooseChatRoomsAction.setObjectName(u"chooseChatRoomsAction")
        self.chooseChatRoomsAction.setCheckable(False)
        self.chooseChatRoomsAction.setChecked(False)
        self.showChatAvatarsAction = QAction(MainWindow)
        self.showChatAvatarsAction.setObjectName(u"showChatAvatarsAction")
        self.showChatAvatarsAction.setCheckable(True)
        self.showChatAvatarsAction.setChecked(True)
        self.kosClipboardActiveAction = QAction(MainWindow)
        self.kosClipboardActiveAction.setObjectName(u"kosClipboardActiveAction")
        self.kosClipboardActiveAction.setCheckable(True)
        self.kosClipboardActiveAction.setChecked(False)
        self.showChatAction = QAction(MainWindow)
        self.showChatAction.setObjectName(u"showChatAction")
        self.showChatAction.setCheckable(True)
        self.showChatAction.setChecked(True)
        self.activateSoundAction = QAction(MainWindow)
        self.activateSoundAction.setObjectName(u"activateSoundAction")
        self.activateSoundAction.setCheckable(True)
        self.activateSoundAction.setChecked(True)
        self.framelessWindowAction = QAction(MainWindow)
        self.framelessWindowAction.setObjectName(u"framelessWindowAction")
        self.framelessWindowAction.setCheckable(True)
        self.quitAction = QAction(MainWindow)
        self.quitAction.setObjectName(u"quitAction")
        self.chooseRegionAction = QAction(MainWindow)
        self.chooseRegionAction.setObjectName(u"chooseRegionAction")
        self.chooseRegionAction.setCheckable(False)
        self.soundSetupAction = QAction(MainWindow)
        self.soundSetupAction.setObjectName(u"soundSetupAction")
        self.jumpbridgeDataAction = QAction(MainWindow)
        self.jumpbridgeDataAction.setObjectName(u"jumpbridgeDataAction")
        self.useSpokenNotificationsAction = QAction(MainWindow)
        self.useSpokenNotificationsAction.setObjectName(u"useSpokenNotificationsAction")
        self.useSpokenNotificationsAction.setCheckable(True)
        self.autoScanIntelAction = QAction(MainWindow)
        self.autoScanIntelAction.setObjectName(u"autoScanIntelAction")
        self.autoScanIntelAction.setCheckable(True)
        self.autoScanIntelAction.setChecked(False)
        self.autoScanIntelAction.setEnabled(True)
        self.autoScanIntelAction.setVisible(True)
        self.autoScanIntelAction.setIconVisibleInMenu(False)
        self.actionAlway_On_Top = QAction(MainWindow)
        self.actionAlway_On_Top.setObjectName(u"actionAlway_On_Top")
        self.actionFrameless = QAction(MainWindow)
        self.actionFrameless.setObjectName(u"actionFrameless")
        self.actionTransparency = QAction(MainWindow)
        self.actionTransparency.setObjectName(u"actionTransparency")
        self.providenceRegionAction = QAction(MainWindow)
        self.providenceRegionAction.setObjectName(u"providenceRegionAction")
        self.providenceRegionAction.setCheckable(True)
        self.catchRegionAction = QAction(MainWindow)
        self.catchRegionAction.setObjectName(u"catchRegionAction")
        self.catchRegionAction.setCheckable(True)
        self.providenceCatchRegionAction = QAction(MainWindow)
        self.providenceCatchRegionAction.setObjectName(u"providenceCatchRegionAction")
        self.providenceCatchRegionAction.setCheckable(True)
        self.providenceCatchCompactRegionAction = QAction(MainWindow)
        self.providenceCatchCompactRegionAction.setObjectName(u"providenceCatchCompactRegionAction")
        self.providenceCatchCompactRegionAction.setCheckable(True)
        self.queriousRegionAction = QAction(MainWindow)
        self.queriousRegionAction.setObjectName(u"queriousRegionAction")
        self.queriousRegionAction.setCheckable(True)
        self.actionDefault = QAction(MainWindow)
        self.actionDefault.setObjectName(u"actionDefault")
        self.actionDarkstyle = QAction(MainWindow)
        self.actionDarkstyle.setObjectName(u"actionDarkstyle")
        self.actionScan_on_Window_Change = QAction(MainWindow)
        self.actionScan_on_Window_Change.setObjectName(u"actionScan_on_Window_Change")
        self.autoRescanAction = QAction(MainWindow)
        self.autoRescanAction.setObjectName(u"autoRescanAction")
        self.autoRescanAction.setCheckable(True)
        self.autoRescanAction.setChecked(False)
        self.rescanNowAction = QAction(MainWindow)
        self.rescanNowAction.setObjectName(u"rescanNowAction")
        self.clearIntelAction = QAction(MainWindow)
        self.clearIntelAction.setObjectName(u"clearIntelAction")
        self.actionConnec = QAction(MainWindow)
        self.actionConnec.setObjectName(u"actionConnec")
        icon1 = QIcon()
        icon1.addFile(u"res/eve-sso-login-black-small.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionConnec.setIcon(icon1)
        self.actionAuto_switch = QAction(MainWindow)
        self.actionAuto_switch.setObjectName(u"actionAuto_switch")
        self.actionAuto_switch.setCheckable(True)
        self.action20_min = QAction(MainWindow)
        self.action20_min.setObjectName(u"action20_min")
        self.action20_min.setCheckable(True)
        self.action40_min = QAction(MainWindow)
        self.action40_min.setObjectName(u"action40_min")
        self.action40_min.setCheckable(True)
        self.action60_min = QAction(MainWindow)
        self.action60_min.setObjectName(u"action60_min")
        self.action60_min.setCheckable(True)
        self.wickedcreekScaldingpassRegionAction = QAction(MainWindow)
        self.wickedcreekScaldingpassRegionAction.setObjectName(u"wickedcreekScaldingpassRegionAction")
        self.wickedcreekScaldingpassRegionAction.setCheckable(True)
        self.actionChars = QAction(MainWindow)
        self.actionChars.setObjectName(u"actionChars")
        self.actionChars_2 = QAction(MainWindow)
        self.actionChars_2.setObjectName(u"actionChars_2")
        self.actionChar = QAction(MainWindow)
        self.actionChar.setObjectName(u"actionChar")
        self.actionsas = QAction(MainWindow)
        self.actionsas.setObjectName(u"actionsas")
        self.actionInvert_Mouse_Wheel = QAction(MainWindow)
        self.actionInvert_Mouse_Wheel.setObjectName(u"actionInvert_Mouse_Wheel")
        self.actionInvert_Mouse_Wheel.setCheckable(True)
        self.actionInvertMouseWheel = QAction(MainWindow)
        self.actionInvertMouseWheel.setObjectName(u"actionInvertMouseWheel")
        self.actionInvertMouseWheel.setCheckable(True)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.gridLayout_2 = QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName(u"gridLayout_2")
        self.splitter = QSplitter(self.centralwidget)
        self.splitter.setObjectName(u"splitter")
        self.splitter.setOrientation(Qt.Horizontal)
        self.mapwidget = QWidget(self.splitter)
        self.mapwidget.setObjectName(u"mapwidget")
        self.gridLayout = QGridLayout(self.mapwidget)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(2, 2, 2, 2)
        self.mapbuttonwidget = QWidget(self.mapwidget)
        self.mapbuttonwidget.setObjectName(u"mapbuttonwidget")
        self.mapbuttonwidget.setMinimumSize(QSize(0, 24))
        self.mapbuttonwidget.setBaseSize(QSize(1024, 0))
        self.gridLayout_5 = QGridLayout(self.mapbuttonwidget)
        self.gridLayout_5.setSpacing(0)
        self.gridLayout_5.setObjectName(u"gridLayout_5")
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2 = QHBoxLayout()
        self.horizontalLayout_2.setSpacing(2)
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.horizontalLayout_2.setContentsMargins(-1, -1, -1, 0)
        self.frameButton = QToolButton(self.mapbuttonwidget)
        self.frameButton.setObjectName(u"frameButton")
        self.frameButton.setMinimumSize(QSize(0, 32))
        self.frameButton.setMaximumSize(QSize(64, 32))
        font = QFont()
        font.setPointSize(11)
        self.frameButton.setFont(font)
        self.frameButton.setFocusPolicy(Qt.NoFocus)
        icon2 = QIcon()
        icon2.addFile(u":/Icons/res/restoreframe.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.frameButton.setIcon(icon2)
        self.frameButton.setIconSize(QSize(40, 20))

        self.horizontalLayout_2.addWidget(self.frameButton)

        self.horizontalSpacer_2 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout_2.addItem(self.horizontalSpacer_2)

        self.zoomInButton = QToolButton(self.mapbuttonwidget)
        self.zoomInButton.setObjectName(u"zoomInButton")
        self.zoomInButton.setMinimumSize(QSize(0, 27))
        self.zoomInButton.setMaximumSize(QSize(32, 32))
        self.zoomInButton.setFocusPolicy(Qt.NoFocus)
        icon3 = QIcon()
        icon3.addFile(u":/Icons/res/plus.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.zoomInButton.setIcon(icon3)
        self.zoomInButton.setIconSize(QSize(40, 20))

        self.horizontalLayout_2.addWidget(self.zoomInButton)

        self.zoomOutButton = QToolButton(self.mapbuttonwidget)
        self.zoomOutButton.setObjectName(u"zoomOutButton")
        self.zoomOutButton.setMinimumSize(QSize(0, 27))
        self.zoomOutButton.setMaximumSize(QSize(32, 32))
        font1 = QFont()
        font1.setPointSize(13)
        font1.setBold(False)
        self.zoomOutButton.setFont(font1)
        self.zoomOutButton.setFocusPolicy(Qt.NoFocus)
        icon4 = QIcon()
        icon4.addFile(u":/Icons/res/minus.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.zoomOutButton.setIcon(icon4)
        self.zoomOutButton.setIconSize(QSize(40, 20))

        self.horizontalLayout_2.addWidget(self.zoomOutButton)

        self.jumpbridgesButton = QToolButton(self.mapbuttonwidget)
        self.jumpbridgesButton.setObjectName(u"jumpbridgesButton")
        self.jumpbridgesButton.setMinimumSize(QSize(0, 27))
        self.jumpbridgesButton.setMaximumSize(QSize(48, 32))
        self.jumpbridgesButton.setFont(font)
        self.jumpbridgesButton.setFocusPolicy(Qt.NoFocus)
        icon5 = QIcon()
        icon5.addFile(u":/Icons/res/jumpbridge.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.jumpbridgesButton.setIcon(icon5)
        self.jumpbridgesButton.setIconSize(QSize(40, 20))
        self.jumpbridgesButton.setCheckable(True)
        self.jumpbridgesButton.setChecked(True)

        self.horizontalLayout_2.addWidget(self.jumpbridgesButton)

        self.statisticsButton = QToolButton(self.mapbuttonwidget)
        self.statisticsButton.setObjectName(u"statisticsButton")
        self.statisticsButton.setMinimumSize(QSize(0, 27))
        self.statisticsButton.setMaximumSize(QSize(48, 32))
        self.statisticsButton.setFont(font)
        self.statisticsButton.setFocusPolicy(Qt.NoFocus)
        icon6 = QIcon()
        icon6.addFile(u":/Icons/res/statistic.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.statisticsButton.setIcon(icon6)
        self.statisticsButton.setIconSize(QSize(40, 20))
        self.statisticsButton.setCheckable(True)
        self.statisticsButton.setChecked(True)

        self.horizontalLayout_2.addWidget(self.statisticsButton)

        self.horizontalLayout_2.setStretch(1, 3)

        self.gridLayout_5.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)


        self.gridLayout.addWidget(self.mapbuttonwidget, 0, 0, 1, 1)

        self.mapVertScrollBar = QScrollBar(self.mapwidget)
        self.mapVertScrollBar.setObjectName(u"mapVertScrollBar")
        self.mapVertScrollBar.setOrientation(Qt.Vertical)

        self.gridLayout.addWidget(self.mapVertScrollBar, 1, 1, 3, 1)

        self.mapView = PanningWebView(self.mapwidget)
        self.mapView.setObjectName(u"mapView")
        self.mapView.setEnabled(True)
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mapView.sizePolicy().hasHeightForWidth())
        self.mapView.setSizePolicy(sizePolicy)
        self.mapView.setToolTipDuration(1)
        self.mapView.setAutoFillBackground(False)

        self.gridLayout.addWidget(self.mapView, 1, 0, 1, 1)

        self.mapHorzScrollBar = QScrollBar(self.mapwidget)
        self.mapHorzScrollBar.setObjectName(u"mapHorzScrollBar")
        self.mapHorzScrollBar.setOrientation(Qt.Horizontal)

        self.gridLayout.addWidget(self.mapHorzScrollBar, 2, 0, 2, 1)

        self.splitter.addWidget(self.mapwidget)
        self.chatbox = QWidget(self.splitter)
        self.chatbox.setObjectName(u"chatbox")
        self.verticalLayout = QVBoxLayout(self.chatbox)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setContentsMargins(1, 0, 0, 0)
        self.qSidepannel = QTabWidget(self.chatbox)
        self.qSidepannel.setObjectName(u"qSidepannel")
        self.qSidepannel.setTabPosition(QTabWidget.East)
        self.qSidepannel.setDocumentMode(True)
        self.qSidepannel.setMovable(True)
        self.qSidepannel.setTabBarAutoHide(True)
        self.qTabIntel = QWidget()
        self.qTabIntel.setObjectName(u"qTabIntel")
        self.verticalLayout_2 = QVBoxLayout(self.qTabIntel)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setSpacing(2)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.timeInfo = QLabel(self.qTabIntel)
        self.timeInfo.setObjectName(u"timeInfo")
        self.timeInfo.setMinimumSize(QSize(0, 32))
        self.timeInfo.setMaximumSize(QSize(16777215, 32))

        self.horizontalLayout.addWidget(self.timeInfo)

        self.horizontalSpacer_3 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout.addItem(self.horizontalSpacer_3)

        self.chatLargeButton = QToolButton(self.qTabIntel)
        self.chatLargeButton.setObjectName(u"chatLargeButton")
        self.chatLargeButton.setMinimumSize(QSize(32, 32))
        self.chatLargeButton.setMaximumSize(QSize(32, 32))
        self.chatLargeButton.setFocusPolicy(Qt.NoFocus)
        self.chatLargeButton.setIcon(icon3)
        self.chatLargeButton.setIconSize(QSize(40, 20))
        self.chatLargeButton.setAutoRaise(False)

        self.horizontalLayout.addWidget(self.chatLargeButton)

        self.chatSmallButton = QToolButton(self.qTabIntel)
        self.chatSmallButton.setObjectName(u"chatSmallButton")
        self.chatSmallButton.setMinimumSize(QSize(32, 32))
        self.chatSmallButton.setMaximumSize(QSize(32, 32))
        self.chatSmallButton.setFocusPolicy(Qt.NoFocus)
        self.chatSmallButton.setIcon(icon4)
        self.chatSmallButton.setIconSize(QSize(40, 20))

        self.horizontalLayout.addWidget(self.chatSmallButton)


        self.verticalLayout_2.addLayout(self.horizontalLayout)

        self.chatListWidget = QListWidget(self.qTabIntel)
        self.chatListWidget.setObjectName(u"chatListWidget")
        self.chatListWidget.setEnabled(True)
        self.chatListWidget.setFrameShadow(QFrame.Plain)
        self.chatListWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.chatListWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.chatListWidget.setSelectionMode(QAbstractItemView.NoSelection)
        self.chatListWidget.setHorizontalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.chatListWidget.setResizeMode(QListView.Adjust)

        self.verticalLayout_2.addWidget(self.chatListWidget)

        self.qSidepannel.addTab(self.qTabIntel, "")
        self.qTabPOIS = QWidget()
        self.qTabPOIS.setObjectName(u"qTabPOIS")
        self.verticalLayout_5 = QVBoxLayout(self.qTabPOIS)
        self.verticalLayout_5.setSpacing(3)
        self.verticalLayout_5.setObjectName(u"verticalLayout_5")
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.tableViewPOIs = QTableView(self.qTabPOIS)
        self.tableViewPOIs.setObjectName(u"tableViewPOIs")
        self.tableViewPOIs.setEditTriggers(QAbstractItemView.DoubleClicked)
        self.tableViewPOIs.setTabKeyNavigation(False)
        self.tableViewPOIs.setProperty("showDropIndicator", False)
        self.tableViewPOIs.setDragDropOverwriteMode(False)
        self.tableViewPOIs.setSortingEnabled(True)
        self.tableViewPOIs.horizontalHeader().setProperty("showSortIndicator", True)
        self.tableViewPOIs.horizontalHeader().setStretchLastSection(True)
        self.tableViewPOIs.verticalHeader().setVisible(False)
        self.tableViewPOIs.verticalHeader().setHighlightSections(False)

        self.verticalLayout_5.addWidget(self.tableViewPOIs)

        self.qSidepannel.addTab(self.qTabPOIS, "")
        self.qTabJumpbridges = QWidget()
        self.qTabJumpbridges.setObjectName(u"qTabJumpbridges")
        self.verticalLayout_3 = QVBoxLayout(self.qTabJumpbridges)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.tableViewJBs = QTableView(self.qTabJumpbridges)
        self.tableViewJBs.setObjectName(u"tableViewJBs")
        self.tableViewJBs.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableViewJBs.setTabKeyNavigation(False)
        self.tableViewJBs.setProperty("showDropIndicator", False)
        self.tableViewJBs.setAlternatingRowColors(False)
        self.tableViewJBs.setSelectionMode(QAbstractItemView.ContiguousSelection)
        self.tableViewJBs.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableViewJBs.setTextElideMode(Qt.ElideMiddle)
        self.tableViewJBs.setGridStyle(Qt.SolidLine)
        self.tableViewJBs.setSortingEnabled(True)
        self.tableViewJBs.setCornerButtonEnabled(False)
        self.tableViewJBs.horizontalHeader().setDefaultSectionSize(150)
        self.tableViewJBs.horizontalHeader().setHighlightSections(False)
        self.tableViewJBs.horizontalHeader().setStretchLastSection(True)
        self.tableViewJBs.verticalHeader().setVisible(False)
        self.tableViewJBs.verticalHeader().setHighlightSections(False)

        self.verticalLayout_3.addWidget(self.tableViewJBs)

        self.qSidepannel.addTab(self.qTabJumpbridges, "")
        self.qTabAPIChar = QWidget()
        self.qTabAPIChar.setObjectName(u"qTabAPIChar")
        self.verticalLayout_4 = QVBoxLayout(self.qTabAPIChar)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3 = QHBoxLayout()
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.label = QLabel(self.qTabAPIChar)
        self.label.setObjectName(u"label")

        self.horizontalLayout_3.addWidget(self.label)

        self.horizontalSpacer = QSpacerItem(10, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout_3.addItem(self.horizontalSpacer)

        self.currentESICharacter = QComboBox(self.qTabAPIChar)
        self.currentESICharacter.setObjectName(u"currentESICharacter")

        self.horizontalLayout_3.addWidget(self.currentESICharacter)

        self.removeChar = QToolButton(self.qTabAPIChar)
        self.removeChar.setObjectName(u"removeChar")
        icon7 = QIcon()
        icon7.addFile(u":/Icons/res/trash-box.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.removeChar.setIcon(icon7)
        self.removeChar.setIconSize(QSize(24, 24))

        self.horizontalLayout_3.addWidget(self.removeChar)

        self.horizontalLayout_3.setStretch(0, 1)
        self.horizontalLayout_3.setStretch(2, 3)

        self.verticalLayout_4.addLayout(self.horizontalLayout_3)

        self.tableChars = QTableView(self.qTabAPIChar)
        self.tableChars.setObjectName(u"tableChars")
        self.tableChars.setEditTriggers(QAbstractItemView.CurrentChanged|QAbstractItemView.DoubleClicked|QAbstractItemView.SelectedClicked)
        self.tableChars.setSortingEnabled(True)
        self.tableChars.setCornerButtonEnabled(False)
        self.tableChars.horizontalHeader().setStretchLastSection(True)
        self.tableChars.verticalHeader().setVisible(False)

        self.verticalLayout_4.addWidget(self.tableChars)

        self.horizontalLayout_5 = QHBoxLayout()
        self.horizontalLayout_5.setObjectName(u"horizontalLayout_5")
        self.horizontalLayout_5.setContentsMargins(5, 5, 5, 5)
        self.connectToEveOnline = QPushButton(self.qTabAPIChar)
        self.connectToEveOnline.setObjectName(u"connectToEveOnline")
        self.connectToEveOnline.setMinimumSize(QSize(0, 27))
        self.connectToEveOnline.setMaximumSize(QSize(166, 22))
        self.connectToEveOnline.setAutoFillBackground(False)
        self.connectToEveOnline.setText(u"")
        self.connectToEveOnline.setIcon(icon1)
        self.connectToEveOnline.setIconSize(QSize(163, 38))
        self.connectToEveOnline.setFlat(False)

        self.horizontalLayout_5.addWidget(self.connectToEveOnline)


        self.verticalLayout_4.addLayout(self.horizontalLayout_5)

        self.verticalSpacer = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)

        self.verticalLayout_4.addItem(self.verticalSpacer)

        self.qSidepannel.addTab(self.qTabAPIChar, "")
        self.qTabThera = QWidget()
        self.qTabThera.setObjectName(u"qTabThera")
        self.verticalLayout_6 = QVBoxLayout(self.qTabThera)
        self.verticalLayout_6.setSpacing(3)
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4 = QHBoxLayout()
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.lineEditThera = QLineEdit(self.qTabThera)
        self.lineEditThera.setObjectName(u"lineEditThera")

        self.horizontalLayout_4.addWidget(self.lineEditThera)

        self.toolRescanThrea = QToolButton(self.qTabThera)
        self.toolRescanThrea.setObjectName(u"toolRescanThrea")
        icon8 = QIcon()
        icon8.addFile(u":/Icons/res/arrows-rotate.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.toolRescanThrea.setIcon(icon8)
        self.toolRescanThrea.setIconSize(QSize(24, 24))
        self.toolRescanThrea.setCheckable(False)

        self.horizontalLayout_4.addWidget(self.toolRescanThrea)


        self.verticalLayout_6.addLayout(self.horizontalLayout_4)

        self.tableViewThera = QTableView(self.qTabThera)
        self.tableViewThera.setObjectName(u"tableViewThera")
        self.tableViewThera.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableViewThera.setSortingEnabled(True)
        self.tableViewThera.setCornerButtonEnabled(False)
        self.tableViewThera.horizontalHeader().setStretchLastSection(True)
        self.tableViewThera.verticalHeader().setVisible(False)

        self.verticalLayout_6.addWidget(self.tableViewThera)

        self.qSidepannel.addTab(self.qTabThera, "")

        self.verticalLayout.addWidget(self.qSidepannel)

        self.splitter.addWidget(self.chatbox)

        self.gridLayout_2.addWidget(self.splitter, 0, 0, 1, 1)

        self.updateAvail = QPushButton(self.centralwidget)
        self.updateAvail.setObjectName(u"updateAvail")

        self.gridLayout_2.addWidget(self.updateAvail, 1, 0, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1023, 24))
        self.menu = QMenu(self.menubar)
        self.menu.setObjectName(u"menu")
        self.menuChat = QMenu(self.menubar)
        self.menuChat.setObjectName(u"menuChat")
        self.menuSound = QMenu(self.menubar)
        self.menuSound.setObjectName(u"menuSound")
        self.menuRegion = QMenu(self.menubar)
        self.menuRegion.setObjectName(u"menuRegion")
        self.menuWindow = QMenu(self.menubar)
        self.menuWindow.setObjectName(u"menuWindow")
        self.menuTransparency = QMenu(self.menuWindow)
        self.menuTransparency.setObjectName(u"menuTransparency")
        self.menuTheme = QMenu(self.menuWindow)
        self.menuTheme.setObjectName(u"menuTheme")
        self.menuIntel = QMenu(self.menubar)
        self.menuIntel.setObjectName(u"menuIntel")
        self.menuTime = QMenu(self.menuIntel)
        self.menuTime.setObjectName(u"menuTime")
        self.menuChars = QMenu(self.menuIntel)
        self.menuChars.setObjectName(u"menuChars")
        MainWindow.setMenuBar(self.menubar)

        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menuChat.menuAction())
        self.menubar.addAction(self.menuSound.menuAction())
        self.menubar.addAction(self.menuRegion.menuAction())
        self.menubar.addAction(self.menuWindow.menuAction())
        self.menubar.addAction(self.menuIntel.menuAction())
        self.menu.addSeparator()
        self.menu.addAction(self.infoAction)
        self.menu.addSeparator()
        self.menu.addAction(self.quitAction)
        self.menuChat.addAction(self.showChatAvatarsAction)
        self.menuChat.addAction(self.chooseChatRoomsAction)
        self.menuChat.addSeparator()
        self.menuSound.addAction(self.activateSoundAction)
        self.menuSound.addAction(self.useSpokenNotificationsAction)
        self.menuSound.addAction(self.soundSetupAction)
        self.menuSound.addSeparator()
        self.menuRegion.addAction(self.catchRegionAction)
        self.menuRegion.addAction(self.providenceRegionAction)
        self.menuRegion.addAction(self.queriousRegionAction)
        self.menuRegion.addSeparator()
        self.menuRegion.addAction(self.wickedcreekScaldingpassRegionAction)
        self.menuRegion.addAction(self.providenceCatchRegionAction)
        self.menuRegion.addAction(self.providenceCatchCompactRegionAction)
        self.menuRegion.addSeparator()
        self.menuRegion.addAction(self.chooseRegionAction)
        self.menuRegion.addAction(self.actionAuto_switch)
        self.menuRegion.addSeparator()
        self.menuRegion.addAction(self.jumpbridgeDataAction)
        self.menuRegion.addSeparator()
        self.menuRegion.addSeparator()
        self.menuWindow.addAction(self.showChatAction)
        self.menuWindow.addAction(self.alwaysOnTopAction)
        self.menuWindow.addAction(self.actionInvertMouseWheel)
        self.menuWindow.addAction(self.framelessWindowAction)
        self.menuWindow.addAction(self.menuTransparency.menuAction())
        self.menuWindow.addSeparator()
        self.menuWindow.addAction(self.menuTheme.menuAction())
        self.menuIntel.addAction(self.menuChars.menuAction())
        self.menuIntel.addAction(self.menuTime.menuAction())
        self.menuIntel.addAction(self.clearIntelAction)
        self.menuIntel.addAction(self.rescanNowAction)
        self.menuIntel.addSeparator()
        self.menuTime.addSeparator()

        self.retranslateUi(MainWindow)

        self.qSidepannel.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Spyglass", None))
        self.infoAction.setText(QCoreApplication.translate("MainWindow", u"Info ...", None))
        self.alwaysOnTopAction.setText(QCoreApplication.translate("MainWindow", u"Always On Top", None))
        self.opac100.setText(QCoreApplication.translate("MainWindow", u"Opacity 100%", None))
        self.opac80.setText(QCoreApplication.translate("MainWindow", u"Opacity 80%", None))
        self.opac60.setText(QCoreApplication.translate("MainWindow", u"Opacity 60%", None))
        self.opac40.setText(QCoreApplication.translate("MainWindow", u"Opacity 40%", None))
        self.opac20.setText(QCoreApplication.translate("MainWindow", u"Opacity 20%", None))
        self.chooseChatRoomsAction.setText(QCoreApplication.translate("MainWindow", u"Choose Chatrooms ...", None))
        self.showChatAvatarsAction.setText(QCoreApplication.translate("MainWindow", u"Show Chat Avatars", None))
        self.kosClipboardActiveAction.setText(QCoreApplication.translate("MainWindow", u"Auto KOS-Check Clipboard", None))
#if QT_CONFIG(tooltip)
        self.kosClipboardActiveAction.setToolTip(QCoreApplication.translate("MainWindow", u"Activate Clipboard KOS-Check", None))
#endif // QT_CONFIG(tooltip)
        self.showChatAction.setText(QCoreApplication.translate("MainWindow", u"Show Tabs", None))
        self.activateSoundAction.setText(QCoreApplication.translate("MainWindow", u"Activate Sound", None))
        self.framelessWindowAction.setText(QCoreApplication.translate("MainWindow", u"Frameless Main Window", None))
#if QT_CONFIG(tooltip)
        self.framelessWindowAction.setToolTip(QCoreApplication.translate("MainWindow", u"Frameless Main Window", None))
#endif // QT_CONFIG(tooltip)
        self.quitAction.setText(QCoreApplication.translate("MainWindow", u"Quit", None))
        self.chooseRegionAction.setText(QCoreApplication.translate("MainWindow", u"Select Region...", None))
        self.soundSetupAction.setText(QCoreApplication.translate("MainWindow", u"Sound Setup...", None))
        self.jumpbridgeDataAction.setText(QCoreApplication.translate("MainWindow", u"Jumpbridge Data...", None))
        self.useSpokenNotificationsAction.setText(QCoreApplication.translate("MainWindow", u"Spoken Notifications", None))
#if QT_CONFIG(tooltip)
        self.useSpokenNotificationsAction.setToolTip(QCoreApplication.translate("MainWindow", u"Spoken KOS results", None))
#endif // QT_CONFIG(tooltip)
        self.autoScanIntelAction.setText(QCoreApplication.translate("MainWindow", u"Scan Intel For Requests", None))
#if QT_CONFIG(tooltip)
        self.autoScanIntelAction.setToolTip(QCoreApplication.translate("MainWindow", u"When enabled, scans intel for xxx kos requests", None))
#endif // QT_CONFIG(tooltip)
        self.actionAlway_On_Top.setText(QCoreApplication.translate("MainWindow", u"Always On Top", None))
        self.actionFrameless.setText(QCoreApplication.translate("MainWindow", u"Frameless", None))
        self.actionTransparency.setText(QCoreApplication.translate("MainWindow", u"Transparency", None))
        self.providenceRegionAction.setText(QCoreApplication.translate("MainWindow", u"Providence", None))
        self.providenceRegionAction.setProperty("regionName", QCoreApplication.translate("MainWindow", u"providence", None))
        self.catchRegionAction.setText(QCoreApplication.translate("MainWindow", u"Catch", None))
        self.catchRegionAction.setProperty("regionName", QCoreApplication.translate("MainWindow", u"catch", None))
        self.providenceCatchRegionAction.setText(QCoreApplication.translate("MainWindow", u"Provi / Catch", None))
        self.providenceCatchRegionAction.setProperty("regionName", QCoreApplication.translate("MainWindow", u"providence-catch", None))
        self.providenceCatchCompactRegionAction.setText(QCoreApplication.translate("MainWindow", u"Provi / Catch (compact)", None))
        self.providenceCatchCompactRegionAction.setProperty("regionName", QCoreApplication.translate("MainWindow", u"providence-catch-compact", None))
        self.queriousRegionAction.setText(QCoreApplication.translate("MainWindow", u"Querious", None))
        self.queriousRegionAction.setProperty("regionName", QCoreApplication.translate("MainWindow", u"querious", None))
        self.actionDefault.setText(QCoreApplication.translate("MainWindow", u"default", None))
        self.actionDarkstyle.setText(QCoreApplication.translate("MainWindow", u"darkstyle", None))
        self.actionScan_on_Window_Change.setText(QCoreApplication.translate("MainWindow", u"Scan on Window Change", None))
        self.autoRescanAction.setText(QCoreApplication.translate("MainWindow", u"Auto Rescan", None))
#if QT_CONFIG(tooltip)
        self.autoRescanAction.setToolTip(QCoreApplication.translate("MainWindow", u"<html><head/><body><p>Automatically Rescan Intel whenever the map reloads.</p></body></html>", None))
#endif // QT_CONFIG(tooltip)
        self.rescanNowAction.setText(QCoreApplication.translate("MainWindow", u"Rescan Now", None))
        self.clearIntelAction.setText(QCoreApplication.translate("MainWindow", u"Clear Intel", None))
        self.actionConnec.setText("")
        self.actionAuto_switch.setText(QCoreApplication.translate("MainWindow", u"Auto  switch Region", None))
        self.action20_min.setText(QCoreApplication.translate("MainWindow", u"20min", None))
        self.action40_min.setText(QCoreApplication.translate("MainWindow", u"40 min", None))
        self.action60_min.setText(QCoreApplication.translate("MainWindow", u"60 min", None))
        self.wickedcreekScaldingpassRegionAction.setText(QCoreApplication.translate("MainWindow", u"Tactical Map", None))
        self.wickedcreekScaldingpassRegionAction.setProperty("regionName", QCoreApplication.translate("MainWindow", u"Denci_Tactical", None))
        self.actionChars.setText(QCoreApplication.translate("MainWindow", u"Chars", None))
        self.actionChars_2.setText(QCoreApplication.translate("MainWindow", u"Chars", None))
        self.actionChar.setText(QCoreApplication.translate("MainWindow", u"Char", None))
        self.actionsas.setText(QCoreApplication.translate("MainWindow", u"sas", None))
        self.actionInvert_Mouse_Wheel.setText(QCoreApplication.translate("MainWindow", u"Invert Mouse Wheel", None))
        self.actionInvertMouseWheel.setText(QCoreApplication.translate("MainWindow", u"Invert Mouse Wheel", None))
#if QT_CONFIG(tooltip)
        self.frameButton.setToolTip(QCoreApplication.translate("MainWindow", u"Restore WIndow Frame", None))
#endif // QT_CONFIG(tooltip)
        self.frameButton.setText("")
#if QT_CONFIG(tooltip)
        self.zoomInButton.setToolTip(QCoreApplication.translate("MainWindow", u"Zoom In", None))
#endif // QT_CONFIG(tooltip)
        self.zoomInButton.setText("")
#if QT_CONFIG(tooltip)
        self.zoomOutButton.setToolTip(QCoreApplication.translate("MainWindow", u"Zoom out", None))
#endif // QT_CONFIG(tooltip)
        self.zoomOutButton.setText("")
#if QT_CONFIG(tooltip)
        self.jumpbridgesButton.setToolTip(QCoreApplication.translate("MainWindow", u"Show Ansiblex on Map", None))
#endif // QT_CONFIG(tooltip)
        self.jumpbridgesButton.setText("")
#if QT_CONFIG(tooltip)
        self.statisticsButton.setToolTip(QCoreApplication.translate("MainWindow", u"Show System Statistic on Map", None))
#endif // QT_CONFIG(tooltip)
        self.statisticsButton.setText("")
        self.timeInfo.setText(QCoreApplication.translate("MainWindow", u"All Intel (past 20 minutes)", None))
#if QT_CONFIG(tooltip)
        self.chatLargeButton.setToolTip(QCoreApplication.translate("MainWindow", u"Larger Text", None))
#endif // QT_CONFIG(tooltip)
        self.chatLargeButton.setText("")
#if QT_CONFIG(tooltip)
        self.chatSmallButton.setToolTip(QCoreApplication.translate("MainWindow", u"Smaller Text", None))
#endif // QT_CONFIG(tooltip)
        self.chatSmallButton.setText("")
#if QT_CONFIG(shortcut)
        self.chatSmallButton.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.qSidepannel.setTabText(self.qSidepannel.indexOf(self.qTabIntel), QCoreApplication.translate("MainWindow", u"Intel", None))
        self.qSidepannel.setTabText(self.qSidepannel.indexOf(self.qTabPOIS), QCoreApplication.translate("MainWindow", u"POIs", None))
        self.qSidepannel.setTabText(self.qSidepannel.indexOf(self.qTabJumpbridges), QCoreApplication.translate("MainWindow", u"JBs", None))
        self.label.setText(QCoreApplication.translate("MainWindow", u"Current API Char", None))
#if QT_CONFIG(tooltip)
        self.removeChar.setToolTip(QCoreApplication.translate("MainWindow", u"Remove API Key", None))
#endif // QT_CONFIG(tooltip)
        self.removeChar.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
        self.qSidepannel.setTabText(self.qSidepannel.indexOf(self.qTabAPIChar), QCoreApplication.translate("MainWindow", u"API Chars", None))
#if QT_CONFIG(tooltip)
        self.toolRescanThrea.setToolTip(QCoreApplication.translate("MainWindow", u"Update Thera Connections", None))
#endif // QT_CONFIG(tooltip)
        self.toolRescanThrea.setText(QCoreApplication.translate("MainWindow", u"...", None))
        self.qSidepannel.setTabText(self.qSidepannel.indexOf(self.qTabThera), QCoreApplication.translate("MainWindow", u"Thera", None))
#if QT_CONFIG(tooltip)
        self.updateAvail.setToolTip(QCoreApplication.translate("MainWindow", u"Update Software", None))
#endif // QT_CONFIG(tooltip)
        self.updateAvail.setText(QCoreApplication.translate("MainWindow", u"PushButton", None))
        self.menu.setTitle(QCoreApplication.translate("MainWindow", u"EVE-Spyglass", None))
        self.menuChat.setTitle(QCoreApplication.translate("MainWindow", u"Chatrooms", None))
        self.menuSound.setTitle(QCoreApplication.translate("MainWindow", u"Sound", None))
        self.menuRegion.setTitle(QCoreApplication.translate("MainWindow", u"Region", None))
        self.menuWindow.setTitle(QCoreApplication.translate("MainWindow", u"Window", None))
        self.menuTransparency.setTitle(QCoreApplication.translate("MainWindow", u"Transparency", None))
        self.menuTheme.setTitle(QCoreApplication.translate("MainWindow", u"Theme", None))
        self.menuIntel.setTitle(QCoreApplication.translate("MainWindow", u"Intel", None))
        self.menuTime.setTitle(QCoreApplication.translate("MainWindow", u"Intel Time", None))
        self.menuChars.setTitle(QCoreApplication.translate("MainWindow", u"Chars used", None))
    # retranslateUi

