# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'MainWindow.ui'
##
## Created by: Qt User Interface Compiler version 6.8.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QComboBox, QDockWidget,
    QFrame, QGridLayout, QHBoxLayout, QHeaderView,
    QLabel, QLineEdit, QListView, QListWidget,
    QListWidgetItem, QMainWindow, QMenu, QMenuBar,
    QPushButton, QScrollBar, QSizePolicy, QSpacerItem,
    QSplitter, QTableView, QToolButton, QVBoxLayout,
    QWidget)

from vi.panningwebview import PanningWebView
import resource_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1417, 843)
        icon = QIcon()
        icon.addFile(u":/Icons/icon.ico", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.000000000000000)
        self.actionShowInfo = QAction(MainWindow)
        self.actionShowInfo.setObjectName(u"actionShowInfo")
        self.actionAlwaysOnTop = QAction(MainWindow)
        self.actionAlwaysOnTop.setObjectName(u"actionAlwaysOnTop")
        self.actionAlwaysOnTop.setCheckable(True)
        self.actionAlwaysOnTop.setChecked(False)
        self.actionChooseChatRooms = QAction(MainWindow)
        self.actionChooseChatRooms.setObjectName(u"actionChooseChatRooms")
        self.actionChooseChatRooms.setCheckable(False)
        self.actionChooseChatRooms.setChecked(False)
        self.actionShowChatAvatars = QAction(MainWindow)
        self.actionShowChatAvatars.setObjectName(u"actionShowChatAvatars")
        self.actionShowChatAvatars.setCheckable(True)
        self.actionShowChatAvatars.setChecked(True)
        icon1 = QIcon()
        icon1.addFile(u":/Icons/res/avatar.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionShowChatAvatars.setIcon(icon1)
        self.actionShowChat = QAction(MainWindow)
        self.actionShowChat.setObjectName(u"actionShowChat")
        self.actionShowChat.setCheckable(True)
        self.actionShowChat.setChecked(True)
        self.actionActivateSound = QAction(MainWindow)
        self.actionActivateSound.setObjectName(u"actionActivateSound")
        self.actionActivateSound.setCheckable(True)
        self.actionActivateSound.setChecked(True)
        icon2 = QIcon()
        icon2.addFile(u":/Icons/res/volume.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionActivateSound.setIcon(icon2)
        self.actionFramelessWindow = QAction(MainWindow)
        self.actionFramelessWindow.setObjectName(u"actionFramelessWindow")
        self.actionFramelessWindow.setCheckable(True)
        icon3 = QIcon()
        icon3.addFile(u":/Icons/res/restoreframe.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionFramelessWindow.setIcon(icon3)
        self.actionQuitAppl = QAction(MainWindow)
        self.actionQuitAppl.setObjectName(u"actionQuitAppl")
        self.actionSoundSetup = QAction(MainWindow)
        self.actionSoundSetup.setObjectName(u"actionSoundSetup")
        self.actionJumpbridgeData = QAction(MainWindow)
        self.actionJumpbridgeData.setObjectName(u"actionJumpbridgeData")
        self.actionUseSpokenNotifications = QAction(MainWindow)
        self.actionUseSpokenNotifications.setObjectName(u"actionUseSpokenNotifications")
        self.actionUseSpokenNotifications.setCheckable(True)
        icon4 = QIcon()
        icon4.addFile(u":/Icons/res/speach.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionUseSpokenNotifications.setIcon(icon4)
        self.actionAlway_On_Top = QAction(MainWindow)
        self.actionAlway_On_Top.setObjectName(u"actionAlway_On_Top")
        self.actionTransparency = QAction(MainWindow)
        self.actionTransparency.setObjectName(u"actionTransparency")
        self.actionProvidenceRegion = QAction(MainWindow)
        self.actionProvidenceRegion.setObjectName(u"actionProvidenceRegion")
        self.actionProvidenceRegion.setCheckable(True)
        self.actionProvidenceRegion.setProperty(u"regionName", u"Providence")
        self.actionCatchRegion = QAction(MainWindow)
        self.actionCatchRegion.setObjectName(u"actionCatchRegion")
        self.actionCatchRegion.setCheckable(True)
        self.actionCatchRegion.setProperty(u"regionName", u"Catch")
        self.actionProvidenceCatchRegion = QAction(MainWindow)
        self.actionProvidenceCatchRegion.setObjectName(u"actionProvidenceCatchRegion")
        self.actionProvidenceCatchRegion.setCheckable(True)
        self.actionProvidenceCatchRegion.setProperty(u"regionName", u"Perrigen Falls")
        self.actionProvidenceCatchCompactRegion = QAction(MainWindow)
        self.actionProvidenceCatchCompactRegion.setObjectName(u"actionProvidenceCatchCompactRegion")
        self.actionProvidenceCatchCompactRegion.setCheckable(True)
        self.actionProvidenceCatchCompactRegion.setProperty(u"regionName", u"Pure Blind")
        self.actionQueriousRegion = QAction(MainWindow)
        self.actionQueriousRegion.setObjectName(u"actionQueriousRegion")
        self.actionQueriousRegion.setCheckable(True)
        self.actionQueriousRegion.setProperty(u"regionName", u"Querious")
        self.actionDefault = QAction(MainWindow)
        self.actionDefault.setObjectName(u"actionDefault")
        self.actionDarkstyle = QAction(MainWindow)
        self.actionDarkstyle.setObjectName(u"actionDarkstyle")
        self.actionRescanIntelNow = QAction(MainWindow)
        self.actionRescanIntelNow.setObjectName(u"actionRescanIntelNow")
        icon5 = QIcon()
        icon5.addFile(u":/Icons/res/arrows-rotate.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionRescanIntelNow.setIcon(icon5)
        self.actionClearIntelChat = QAction(MainWindow)
        self.actionClearIntelChat.setObjectName(u"actionClearIntelChat")
        icon6 = QIcon()
        icon6.addFile(u":/Icons/res/trash-box.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionClearIntelChat.setIcon(icon6)
        self.actionAutoSwitchRegions = QAction(MainWindow)
        self.actionAutoSwitchRegions.setObjectName(u"actionAutoSwitchRegions")
        self.actionAutoSwitchRegions.setCheckable(True)
        self.actionWickedcreekScaldingpassRegion = QAction(MainWindow)
        self.actionWickedcreekScaldingpassRegion.setObjectName(u"actionWickedcreekScaldingpassRegion")
        self.actionWickedcreekScaldingpassRegion.setCheckable(True)
        self.actionWickedcreekScaldingpassRegion.setProperty(u"regionName", u"Denci_Tactical")
        self.actionInvertMouseWheel = QAction(MainWindow)
        self.actionInvertMouseWheel.setObjectName(u"actionInvertMouseWheel")
        self.actionInvertMouseWheel.setCheckable(True)
        self.actionUserTheraRoutes = QAction(MainWindow)
        self.actionUserTheraRoutes.setObjectName(u"actionUserTheraRoutes")
        self.actionUserTheraRoutes.setCheckable(True)
        self.actionUserTheraRoutes.setChecked(False)
        icon7 = QIcon()
        icon7.addFile(u":/Icons/res/route.svg", QSize(), QIcon.Mode.Normal, QIcon.State.On)
        self.actionUserTheraRoutes.setIcon(icon7)
        self.actionShowADMonMap = QAction(MainWindow)
        self.actionShowADMonMap.setObjectName(u"actionShowADMonMap")
        self.actionShowADMonMap.setCheckable(True)
        icon8 = QIcon()
        icon8.addFile(u":/Icons/res/adm_vul.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionShowADMonMap.setIcon(icon8)
        self.actionShowSystemStatisticOnMap = QAction(MainWindow)
        self.actionShowSystemStatisticOnMap.setObjectName(u"actionShowSystemStatisticOnMap")
        self.actionShowSystemStatisticOnMap.setCheckable(True)
        icon9 = QIcon()
        icon9.addFile(u":/Icons/res/statistic.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionShowSystemStatisticOnMap.setIcon(icon9)
        self.actionShowJumpBridgeConnectionsOnMap = QAction(MainWindow)
        self.actionShowJumpBridgeConnectionsOnMap.setObjectName(u"actionShowJumpBridgeConnectionsOnMap")
        self.actionShowJumpBridgeConnectionsOnMap.setCheckable(True)
        icon10 = QIcon()
        icon10.addFile(u":/Icons/res/jumpbridge.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionShowJumpBridgeConnectionsOnMap.setIcon(icon10)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout_5 = QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName(u"verticalLayout_5")
        self.verticalLayout_5.setContentsMargins(2, 2, 2, 2)
        self.splitter = QSplitter(self.centralwidget)
        self.splitter.setObjectName(u"splitter")
        self.splitter.setOrientation(Qt.Horizontal)
        self.splitter.setHandleWidth(20)
        self.mapwidget = QWidget(self.splitter)
        self.mapwidget.setObjectName(u"mapwidget")
        self.gridLayout = QGridLayout(self.mapwidget)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.mapbuttonwidget = QWidget(self.mapwidget)
        self.mapbuttonwidget.setObjectName(u"mapbuttonwidget")
        self.mapbuttonwidget.setMinimumSize(QSize(0, 24))
        self.mapbuttonwidget.setBaseSize(QSize(1024, 0))
        self.gridLayout_5 = QGridLayout(self.mapbuttonwidget)
        self.gridLayout_5.setSpacing(0)
        self.gridLayout_5.setObjectName(u"gridLayout_5")
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2 = QHBoxLayout()
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.frameButton = QToolButton(self.mapbuttonwidget)
        self.frameButton.setObjectName(u"frameButton")
        self.frameButton.setMinimumSize(QSize(0, 32))
        self.frameButton.setMaximumSize(QSize(64, 32))
        font = QFont()
        font.setPointSize(11)
        self.frameButton.setFont(font)
        self.frameButton.setFocusPolicy(Qt.NoFocus)
        self.frameButton.setIcon(icon3)
        self.frameButton.setIconSize(QSize(40, 20))

        self.horizontalLayout_2.addWidget(self.frameButton)

        self.searchSystem = QToolButton(self.mapbuttonwidget)
        self.searchSystem.setObjectName(u"searchSystem")
        self.searchSystem.setMinimumSize(QSize(32, 32))
        self.searchSystem.setMaximumSize(QSize(32, 32))
        self.searchSystem.setFocusPolicy(Qt.NoFocus)
        icon11 = QIcon()
        icon11.addFile(u":/Icons/res/search.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.searchSystem.setIcon(icon11)
        self.searchSystem.setIconSize(QSize(32, 32))
#if QT_CONFIG(shortcut)
        self.searchSystem.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.searchSystem.setCheckable(True)
        self.searchSystem.setAutoRaise(True)

        self.horizontalLayout_2.addWidget(self.searchSystem)

        self.horizontalSpacer_2 = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout_2.addItem(self.horizontalSpacer_2)

        self.label_2 = QLabel(self.mapbuttonwidget)
        self.label_2.setObjectName(u"label_2")

        self.horizontalLayout_2.addWidget(self.label_2)

        self.regionNameField = QComboBox(self.mapbuttonwidget)
        self.regionNameField.setObjectName(u"regionNameField")
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.regionNameField.sizePolicy().hasHeightForWidth())
        self.regionNameField.setSizePolicy(sizePolicy)
        self.regionNameField.setMinimumSize(QSize(200, 0))
        self.regionNameField.setMaximumSize(QSize(300, 500))
        self.regionNameField.setEditable(False)
        self.regionNameField.setCurrentText(u"")
        self.regionNameField.setMaxVisibleItems(30)
        self.regionNameField.setInsertPolicy(QComboBox.NoInsert)
        self.regionNameField.setSizeAdjustPolicy(QComboBox.AdjustToContents)
        self.regionNameField.setMinimumContentsLength(20)
        self.regionNameField.setPlaceholderText(u"")

        self.horizontalLayout_2.addWidget(self.regionNameField)

        self.label = QLabel(self.mapbuttonwidget)
        self.label.setObjectName(u"label")

        self.horizontalLayout_2.addWidget(self.label)

        self.currentESICharacter = QComboBox(self.mapbuttonwidget)
        self.currentESICharacter.setObjectName(u"currentESICharacter")
        self.currentESICharacter.setPlaceholderText(u"")

        self.horizontalLayout_2.addWidget(self.currentESICharacter)

        self.locateChar = QToolButton(self.mapbuttonwidget)
        self.locateChar.setObjectName(u"locateChar")
        self.locateChar.setMinimumSize(QSize(0, 27))
        self.locateChar.setMaximumSize(QSize(32, 32))
        self.locateChar.setFocusPolicy(Qt.NoFocus)
        icon12 = QIcon()
        icon12.addFile(u":/Icons/res/locate.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.locateChar.setIcon(icon12)
        self.locateChar.setIconSize(QSize(40, 20))
        self.locateChar.setAutoRaise(True)

        self.horizontalLayout_2.addWidget(self.locateChar)

        self.zoomInButton = QToolButton(self.mapbuttonwidget)
        self.zoomInButton.setObjectName(u"zoomInButton")
        self.zoomInButton.setMinimumSize(QSize(0, 27))
        self.zoomInButton.setMaximumSize(QSize(32, 32))
        self.zoomInButton.setFocusPolicy(Qt.NoFocus)
        icon13 = QIcon()
        icon13.addFile(u":/Icons/res/plus.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.zoomInButton.setIcon(icon13)
        self.zoomInButton.setIconSize(QSize(40, 20))
#if QT_CONFIG(shortcut)
        self.zoomInButton.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.zoomInButton.setAutoRaise(True)

        self.horizontalLayout_2.addWidget(self.zoomInButton)

        self.zoomOutButton = QToolButton(self.mapbuttonwidget)
        self.zoomOutButton.setObjectName(u"zoomOutButton")
        self.zoomOutButton.setMinimumSize(QSize(0, 27))
        self.zoomOutButton.setMaximumSize(QSize(32, 32))
        font1 = QFont()
        font1.setPointSize(13)
        font1.setBold(False)
        self.zoomOutButton.setFont(font1)
        self.zoomOutButton.setFocusPolicy(Qt.NoFocus)
        icon14 = QIcon()
        icon14.addFile(u":/Icons/res/minus.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.zoomOutButton.setIcon(icon14)
        self.zoomOutButton.setIconSize(QSize(40, 20))
#if QT_CONFIG(shortcut)
        self.zoomOutButton.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.zoomOutButton.setAutoRaise(True)

        self.horizontalLayout_2.addWidget(self.zoomOutButton)

        self.jumpbridgesButton = QToolButton(self.mapbuttonwidget)
        self.jumpbridgesButton.setObjectName(u"jumpbridgesButton")
        self.jumpbridgesButton.setMinimumSize(QSize(0, 27))
        self.jumpbridgesButton.setMaximumSize(QSize(48, 32))
        self.jumpbridgesButton.setFont(font)
        self.jumpbridgesButton.setFocusPolicy(Qt.NoFocus)
        self.jumpbridgesButton.setIcon(icon10)
        self.jumpbridgesButton.setIconSize(QSize(40, 20))
#if QT_CONFIG(shortcut)
        self.jumpbridgesButton.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.jumpbridgesButton.setCheckable(True)
        self.jumpbridgesButton.setChecked(False)
        self.jumpbridgesButton.setAutoRaise(True)

        self.horizontalLayout_2.addWidget(self.jumpbridgesButton)

        self.statisticsButton = QToolButton(self.mapbuttonwidget)
        self.statisticsButton.setObjectName(u"statisticsButton")
        self.statisticsButton.setMinimumSize(QSize(0, 27))
        self.statisticsButton.setMaximumSize(QSize(48, 32))
        self.statisticsButton.setFont(font)
        self.statisticsButton.setFocusPolicy(Qt.NoFocus)
        self.statisticsButton.setIcon(icon9)
        self.statisticsButton.setIconSize(QSize(40, 20))
#if QT_CONFIG(shortcut)
        self.statisticsButton.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.statisticsButton.setCheckable(True)
        self.statisticsButton.setChecked(False)
        self.statisticsButton.setAutoRaise(True)

        self.horizontalLayout_2.addWidget(self.statisticsButton)

        self.adm_vul_Button = QToolButton(self.mapbuttonwidget)
        self.adm_vul_Button.setObjectName(u"adm_vul_Button")
        self.adm_vul_Button.setEnabled(True)
        self.adm_vul_Button.setMinimumSize(QSize(0, 27))
        self.adm_vul_Button.setMaximumSize(QSize(48, 32))
        self.adm_vul_Button.setFont(font)
        self.adm_vul_Button.setFocusPolicy(Qt.NoFocus)
        self.adm_vul_Button.setIcon(icon8)
        self.adm_vul_Button.setIconSize(QSize(40, 20))
#if QT_CONFIG(shortcut)
        self.adm_vul_Button.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.adm_vul_Button.setCheckable(True)
        self.adm_vul_Button.setChecked(False)
        self.adm_vul_Button.setAutoRaise(True)

        self.horizontalLayout_2.addWidget(self.adm_vul_Button)


        self.gridLayout_5.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)


        self.gridLayout.addWidget(self.mapbuttonwidget, 0, 0, 1, 1)

        self.mapVertScrollBar = QScrollBar(self.mapwidget)
        self.mapVertScrollBar.setObjectName(u"mapVertScrollBar")
        self.mapVertScrollBar.setOrientation(Qt.Vertical)

        self.gridLayout.addWidget(self.mapVertScrollBar, 2, 1, 4, 1)

        self.mapHorzScrollBar = QScrollBar(self.mapwidget)
        self.mapHorzScrollBar.setObjectName(u"mapHorzScrollBar")
        self.mapHorzScrollBar.setOrientation(Qt.Horizontal)

        self.gridLayout.addWidget(self.mapHorzScrollBar, 4, 0, 2, 1)

        self.mapView = PanningWebView(self.mapwidget)
        self.mapView.setObjectName(u"mapView")
        self.mapView.setEnabled(True)
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.mapView.sizePolicy().hasHeightForWidth())
        self.mapView.setSizePolicy(sizePolicy1)
        self.mapView.setToolTipDuration(1)
        self.mapView.setAutoFillBackground(False)
        self.systemNames = QLineEdit(self.mapView)
        self.systemNames.setObjectName(u"systemNames")
        self.systemNames.setGeometry(QRect(0, 1, 411, 31))
#if QT_CONFIG(tooltip)
        self.systemNames.setToolTip(u"Enter the System name so select the region.")
#endif // QT_CONFIG(tooltip)

        self.gridLayout.addWidget(self.mapView, 3, 0, 1, 1)

        self.splitter.addWidget(self.mapwidget)

        self.verticalLayout_5.addWidget(self.splitter)

        self.updateAvail = QPushButton(self.centralwidget)
        self.updateAvail.setObjectName(u"updateAvail")

        self.verticalLayout_5.addWidget(self.updateAvail)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1417, 24))
        self.menu = QMenu(self.menubar)
        self.menu.setObjectName(u"menu")
        self.menuChat = QMenu(self.menubar)
        self.menuChat.setObjectName(u"menuChat")
        self.menuSound = QMenu(self.menubar)
        self.menuSound.setObjectName(u"menuSound")
        self.menuRegion = QMenu(self.menubar)
        self.menuRegion.setObjectName(u"menuRegion")
        self.menuWindow = QMenu(self.menubar)
        self.menuWindow.setObjectName(u"menuWindow")
        self.menuTransparency = QMenu(self.menuWindow)
        self.menuTransparency.setObjectName(u"menuTransparency")
        self.menuTheme = QMenu(self.menuWindow)
        self.menuTheme.setObjectName(u"menuTheme")
        self.menuType_Here = QMenu(self.menuWindow)
        self.menuType_Here.setObjectName(u"menuType_Here")
        self.menuIntel = QMenu(self.menubar)
        self.menuIntel.setObjectName(u"menuIntel")
        self.menuTime = QMenu(self.menuIntel)
        self.menuTime.setObjectName(u"menuTime")
        self.menuChars = QMenu(self.menuIntel)
        self.menuChars.setObjectName(u"menuChars")
        MainWindow.setMenuBar(self.menubar)
        self.dockWidget = QDockWidget(MainWindow)
        self.dockWidget.setObjectName(u"dockWidget")
        self.dockWidget.setFloating(False)
        self.dockWidget.setFeatures(QDockWidget.DockWidgetClosable|QDockWidget.DockWidgetMovable)
        self.dockWidget.setAllowedAreas(Qt.AllDockWidgetAreas)
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.verticalLayout_9 = QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName(u"verticalLayout_9")
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12 = QVBoxLayout()
        self.verticalLayout_12.setSpacing(0)
        self.verticalLayout_12.setObjectName(u"verticalLayout_12")
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.timeInfo = QLabel(self.dockWidgetContents)
        self.timeInfo.setObjectName(u"timeInfo")
        self.timeInfo.setMinimumSize(QSize(0, 32))
        self.timeInfo.setMaximumSize(QSize(16777215, 32))

        self.horizontalLayout.addWidget(self.timeInfo)

        self.horizontalSpacer_3 = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout.addItem(self.horizontalSpacer_3)

        self.clearIntel = QToolButton(self.dockWidgetContents)
        self.clearIntel.setObjectName(u"clearIntel")
        self.clearIntel.setIcon(icon6)
        self.clearIntel.setIconSize(QSize(24, 24))
#if QT_CONFIG(shortcut)
        self.clearIntel.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.clearIntel.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.clearIntel)

        self.rescanIntel = QToolButton(self.dockWidgetContents)
        self.rescanIntel.setObjectName(u"rescanIntel")
        self.rescanIntel.setIcon(icon5)
        self.rescanIntel.setIconSize(QSize(24, 24))
#if QT_CONFIG(shortcut)
        self.rescanIntel.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.rescanIntel.setCheckable(False)
        self.rescanIntel.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.rescanIntel)

        self.chatLargeButton = QToolButton(self.dockWidgetContents)
        self.chatLargeButton.setObjectName(u"chatLargeButton")
        self.chatLargeButton.setMinimumSize(QSize(32, 32))
        self.chatLargeButton.setMaximumSize(QSize(32, 32))
        self.chatLargeButton.setFocusPolicy(Qt.NoFocus)
        self.chatLargeButton.setIcon(icon13)
        self.chatLargeButton.setIconSize(QSize(40, 20))
#if QT_CONFIG(shortcut)
        self.chatLargeButton.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.chatLargeButton.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.chatLargeButton)

        self.chatSmallButton = QToolButton(self.dockWidgetContents)
        self.chatSmallButton.setObjectName(u"chatSmallButton")
        self.chatSmallButton.setMinimumSize(QSize(32, 32))
        self.chatSmallButton.setMaximumSize(QSize(32, 32))
        self.chatSmallButton.setFocusPolicy(Qt.NoFocus)
        self.chatSmallButton.setIcon(icon14)
        self.chatSmallButton.setIconSize(QSize(40, 20))
#if QT_CONFIG(shortcut)
        self.chatSmallButton.setShortcut(u"Ctrl+S")
#endif // QT_CONFIG(shortcut)
        self.chatSmallButton.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.chatSmallButton)

        self.showAvatar = QToolButton(self.dockWidgetContents)
        self.showAvatar.setObjectName(u"showAvatar")
        self.showAvatar.setIcon(icon1)
        self.showAvatar.setIconSize(QSize(24, 24))
#if QT_CONFIG(shortcut)
        self.showAvatar.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.showAvatar.setCheckable(True)
        self.showAvatar.setAutoRaise(True)

        self.horizontalLayout.addWidget(self.showAvatar)


        self.verticalLayout_12.addLayout(self.horizontalLayout)

        self.chatListWidget = QListWidget(self.dockWidgetContents)
        self.chatListWidget.setObjectName(u"chatListWidget")
        self.chatListWidget.setEnabled(True)
        self.chatListWidget.setContextMenuPolicy(Qt.ActionsContextMenu)
        self.chatListWidget.setFrameShadow(QFrame.Plain)
        self.chatListWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.chatListWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.chatListWidget.setSelectionMode(QAbstractItemView.NoSelection)
        self.chatListWidget.setTextElideMode(Qt.ElideNone)
        self.chatListWidget.setHorizontalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.chatListWidget.setResizeMode(QListView.Adjust)
        self.chatListWidget.setSortingEnabled(True)

        self.verticalLayout_12.addWidget(self.chatListWidget)


        self.verticalLayout_9.addLayout(self.verticalLayout_12)

        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.dockWidget)
        self.dockWidget_2 = QDockWidget(MainWindow)
        self.dockWidget_2.setObjectName(u"dockWidget_2")
        self.dockWidget_2.setMinimumSize(QSize(300, 93))
        self.dockWidget_2.setFloating(False)
        self.dockWidget_2.setFeatures(QDockWidget.DockWidgetClosable|QDockWidget.DockWidgetMovable)
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName(u"dockWidgetContents_2")
        self.verticalLayout_2 = QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10 = QVBoxLayout()
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName(u"verticalLayout_10")
        self.tableViewPOIs = QTableView(self.dockWidgetContents_2)
        self.tableViewPOIs.setObjectName(u"tableViewPOIs")
        self.tableViewPOIs.setMinimumSize(QSize(270, 0))
        self.tableViewPOIs.setEditTriggers(QAbstractItemView.DoubleClicked)
        self.tableViewPOIs.setTabKeyNavigation(False)
        self.tableViewPOIs.setProperty(u"showDropIndicator", False)
        self.tableViewPOIs.setDragDropOverwriteMode(False)
        self.tableViewPOIs.setDragDropMode(QAbstractItemView.DragDrop)
        self.tableViewPOIs.setSelectionMode(QAbstractItemView.ContiguousSelection)
        self.tableViewPOIs.setTextElideMode(Qt.ElideNone)
        self.tableViewPOIs.setSortingEnabled(False)
        self.tableViewPOIs.horizontalHeader().setProperty(u"showSortIndicator", False)
        self.tableViewPOIs.horizontalHeader().setStretchLastSection(True)
        self.tableViewPOIs.verticalHeader().setVisible(False)
        self.tableViewPOIs.verticalHeader().setHighlightSections(False)

        self.verticalLayout_10.addWidget(self.tableViewPOIs)


        self.verticalLayout_2.addLayout(self.verticalLayout_10)

        self.dockWidget_2.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.dockWidget_2)
        self.dockWidget_3 = QDockWidget(MainWindow)
        self.dockWidget_3.setObjectName(u"dockWidget_3")
        self.dockWidget_3.setMinimumSize(QSize(300, 93))
        self.dockWidget_3.setFloating(False)
        self.dockWidget_3.setFeatures(QDockWidget.DockWidgetClosable|QDockWidget.DockWidgetMovable)
        self.dockWidgetContents_3 = QWidget()
        self.dockWidgetContents_3.setObjectName(u"dockWidgetContents_3")
        self.verticalLayout_3 = QVBoxLayout(self.dockWidgetContents_3)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8 = QVBoxLayout()
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName(u"verticalLayout_8")
        self.tableViewJBs = QTableView(self.dockWidgetContents_3)
        self.tableViewJBs.setObjectName(u"tableViewJBs")
        self.tableViewJBs.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableViewJBs.setTabKeyNavigation(False)
        self.tableViewJBs.setProperty(u"showDropIndicator", False)
        self.tableViewJBs.setAlternatingRowColors(False)
        self.tableViewJBs.setSelectionMode(QAbstractItemView.ContiguousSelection)
        self.tableViewJBs.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableViewJBs.setTextElideMode(Qt.ElideNone)
        self.tableViewJBs.setGridStyle(Qt.SolidLine)
        self.tableViewJBs.setSortingEnabled(True)
        self.tableViewJBs.setCornerButtonEnabled(False)
        self.tableViewJBs.horizontalHeader().setDefaultSectionSize(150)
        self.tableViewJBs.horizontalHeader().setHighlightSections(False)
        self.tableViewJBs.horizontalHeader().setStretchLastSection(True)
        self.tableViewJBs.verticalHeader().setVisible(False)
        self.tableViewJBs.verticalHeader().setHighlightSections(False)

        self.verticalLayout_8.addWidget(self.tableViewJBs)


        self.verticalLayout_3.addLayout(self.verticalLayout_8)

        self.dockWidget_3.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.dockWidget_3)
        self.dockWidget_4 = QDockWidget(MainWindow)
        self.dockWidget_4.setObjectName(u"dockWidget_4")
        self.dockWidget_4.setFeatures(QDockWidget.DockWidgetClosable|QDockWidget.DockWidgetMovable)
        self.dockWidgetContents_4 = QWidget()
        self.dockWidgetContents_4.setObjectName(u"dockWidgetContents_4")
        self.verticalLayout_7 = QVBoxLayout(self.dockWidgetContents_4)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName(u"verticalLayout_7")
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13 = QVBoxLayout()
        self.verticalLayout_13.setSpacing(0)
        self.verticalLayout_13.setObjectName(u"verticalLayout_13")
        self.horizontalLayout_3 = QHBoxLayout()
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.connectToEveOnline = QPushButton(self.dockWidgetContents_4)
        self.connectToEveOnline.setObjectName(u"connectToEveOnline")
        self.connectToEveOnline.setMinimumSize(QSize(0, 27))
        self.connectToEveOnline.setMaximumSize(QSize(166, 22))
        self.connectToEveOnline.setAutoFillBackground(False)
        self.connectToEveOnline.setText(u"")
        icon15 = QIcon()
        icon15.addFile(u"res/eve-sso-login-black-small.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.connectToEveOnline.setIcon(icon15)
        self.connectToEveOnline.setIconSize(QSize(163, 38))
#if QT_CONFIG(shortcut)
        self.connectToEveOnline.setShortcut(u"")
#endif // QT_CONFIG(shortcut)

        self.horizontalLayout_3.addWidget(self.connectToEveOnline)

        self.horizontalSpacer = QSpacerItem(10, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout_3.addItem(self.horizontalSpacer)

        self.removeChar = QToolButton(self.dockWidgetContents_4)
        self.removeChar.setObjectName(u"removeChar")
        self.removeChar.setIcon(icon6)
        self.removeChar.setIconSize(QSize(24, 24))
        self.removeChar.setAutoRaise(True)

        self.horizontalLayout_3.addWidget(self.removeChar)


        self.verticalLayout_13.addLayout(self.horizontalLayout_3)

        self.horizontalLayout_8 = QHBoxLayout()
        self.horizontalLayout_8.setObjectName(u"horizontalLayout_8")
        self.m_qLedEveScout = QLabel(self.dockWidgetContents_4)
        self.m_qLedEveScout.setObjectName(u"m_qLedEveScout")
        self.m_qLedEveScout.setEnabled(True)
        self.m_qLedEveScout.setMaximumSize(QSize(24, 24))
        self.m_qLedEveScout.setPixmap(QPixmap(u":/Icons/res/online.svg"))
        self.m_qLedEveScout.setScaledContents(True)

        self.horizontalLayout_8.addWidget(self.m_qLedEveScout)

        self.m_qEveScout = QLabel(self.dockWidgetContents_4)
        self.m_qEveScout.setObjectName(u"m_qEveScout")

        self.horizontalLayout_8.addWidget(self.m_qEveScout)

        self.horizontalSpacer_5 = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout_8.addItem(self.horizontalSpacer_5)

        self.m_qEveScoutVersion = QLabel(self.dockWidgetContents_4)
        self.m_qEveScoutVersion.setObjectName(u"m_qEveScoutVersion")
        self.m_qEveScoutVersion.setText(u"")

        self.horizontalLayout_8.addWidget(self.m_qEveScoutVersion)


        self.verticalLayout_13.addLayout(self.horizontalLayout_8)

        self.horizontalLayout_7 = QHBoxLayout()
        self.horizontalLayout_7.setObjectName(u"horizontalLayout_7")
        self.m_qLedZKillboarOnline = QLabel(self.dockWidgetContents_4)
        self.m_qLedZKillboarOnline.setObjectName(u"m_qLedZKillboarOnline")
        self.m_qLedZKillboarOnline.setEnabled(True)
        self.m_qLedZKillboarOnline.setMaximumSize(QSize(24, 24))
        self.m_qLedZKillboarOnline.setPixmap(QPixmap(u":/Icons/res/online.svg"))
        self.m_qLedZKillboarOnline.setScaledContents(True)

        self.horizontalLayout_7.addWidget(self.m_qLedZKillboarOnline)

        self.m_qZKillboard = QLabel(self.dockWidgetContents_4)
        self.m_qZKillboard.setObjectName(u"m_qZKillboard")

        self.horizontalLayout_7.addWidget(self.m_qZKillboard)


        self.verticalLayout_13.addLayout(self.horizontalLayout_7)

        self.horizontalLayout_6 = QHBoxLayout()
        self.horizontalLayout_6.setObjectName(u"horizontalLayout_6")
        self.m_qLedOnline = QLabel(self.dockWidgetContents_4)
        self.m_qLedOnline.setObjectName(u"m_qLedOnline")
        self.m_qLedOnline.setEnabled(True)
        self.m_qLedOnline.setMaximumSize(QSize(24, 24))
        self.m_qLedOnline.setPixmap(QPixmap(u":/Icons/res/online.svg"))
        self.m_qLedOnline.setScaledContents(True)

        self.horizontalLayout_6.addWidget(self.m_qLedOnline)

        self.m_qPlayerOnline = QLabel(self.dockWidgetContents_4)
        self.m_qPlayerOnline.setObjectName(u"m_qPlayerOnline")

        self.horizontalLayout_6.addWidget(self.m_qPlayerOnline)


        self.verticalLayout_13.addLayout(self.horizontalLayout_6)

        self.tableChars = QTableView(self.dockWidgetContents_4)
        self.tableChars.setObjectName(u"tableChars")
        self.tableChars.setEditTriggers(QAbstractItemView.CurrentChanged|QAbstractItemView.DoubleClicked|QAbstractItemView.SelectedClicked)
        self.tableChars.setTextElideMode(Qt.ElideNone)
        self.tableChars.setSortingEnabled(True)
        self.tableChars.setCornerButtonEnabled(False)
        self.tableChars.horizontalHeader().setStretchLastSection(True)
        self.tableChars.verticalHeader().setVisible(False)

        self.verticalLayout_13.addWidget(self.tableChars)

        self.horizontalLayout_10 = QHBoxLayout()
        self.horizontalLayout_10.setObjectName(u"horizontalLayout_10")
        self.label_3 = QLabel(self.dockWidgetContents_4)
        self.label_3.setObjectName(u"label_3")

        self.horizontalLayout_10.addWidget(self.label_3)

        self.clearCache = QToolButton(self.dockWidgetContents_4)
        self.clearCache.setObjectName(u"clearCache")
        self.clearCache.setIcon(icon6)
        self.clearCache.setIconSize(QSize(24, 24))
        self.clearCache.setAutoRaise(True)

        self.horizontalLayout_10.addWidget(self.clearCache)


        self.verticalLayout_13.addLayout(self.horizontalLayout_10)


        self.verticalLayout_7.addLayout(self.verticalLayout_13)

        self.dockWidget_4.setWidget(self.dockWidgetContents_4)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dockWidget_4)
        self.dockWidget_5 = QDockWidget(MainWindow)
        self.dockWidget_5.setObjectName(u"dockWidget_5")
        self.dockWidget_5.setMinimumSize(QSize(270, 126))
        self.dockWidget_5.setFeatures(QDockWidget.DockWidgetClosable|QDockWidget.DockWidgetMovable)
        self.dockWidgetContents_5 = QWidget()
        self.dockWidgetContents_5.setObjectName(u"dockWidgetContents_5")
        self.verticalLayout_4 = QVBoxLayout(self.dockWidgetContents_5)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14 = QVBoxLayout()
        self.verticalLayout_14.setSpacing(0)
        self.verticalLayout_14.setObjectName(u"verticalLayout_14")
        self.horizontalLayout_4 = QHBoxLayout()
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.lineEditThera = QLineEdit(self.dockWidgetContents_5)
        self.lineEditThera.setObjectName(u"lineEditThera")
        self.lineEditThera.setInputMask(u"")
        self.lineEditThera.setText(u"")
        self.lineEditThera.setPlaceholderText(u"")

        self.horizontalLayout_4.addWidget(self.lineEditThera)

        self.toolUseTheraRouting = QToolButton(self.dockWidgetContents_5)
        self.toolUseTheraRouting.setObjectName(u"toolUseTheraRouting")
        icon16 = QIcon()
        icon16.addFile(u":/Icons/res/route.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.toolUseTheraRouting.setIcon(icon16)
        self.toolUseTheraRouting.setIconSize(QSize(24, 24))
#if QT_CONFIG(shortcut)
        self.toolUseTheraRouting.setShortcut(u"")
#endif // QT_CONFIG(shortcut)
        self.toolUseTheraRouting.setCheckable(True)
        self.toolUseTheraRouting.setAutoRaise(True)

        self.horizontalLayout_4.addWidget(self.toolUseTheraRouting)

        self.toolRescanThrea = QToolButton(self.dockWidgetContents_5)
        self.toolRescanThrea.setObjectName(u"toolRescanThrea")
        self.toolRescanThrea.setIcon(icon5)
        self.toolRescanThrea.setIconSize(QSize(24, 24))
        self.toolRescanThrea.setCheckable(False)
        self.toolRescanThrea.setAutoRaise(True)

        self.horizontalLayout_4.addWidget(self.toolRescanThrea)


        self.verticalLayout_14.addLayout(self.horizontalLayout_4)

        self.tableViewThera = QTableView(self.dockWidgetContents_5)
        self.tableViewThera.setObjectName(u"tableViewThera")
        self.tableViewThera.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableViewThera.setTextElideMode(Qt.ElideNone)
        self.tableViewThera.setSortingEnabled(True)
        self.tableViewThera.setCornerButtonEnabled(False)
        self.tableViewThera.horizontalHeader().setStretchLastSection(True)
        self.tableViewThera.verticalHeader().setVisible(False)

        self.verticalLayout_14.addWidget(self.tableViewThera)


        self.verticalLayout_4.addLayout(self.verticalLayout_14)

        self.dockWidget_5.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dockWidget_5)
        self.dockWidget_6 = QDockWidget(MainWindow)
        self.dockWidget_6.setObjectName(u"dockWidget_6")
        self.dockWidget_6.setMinimumSize(QSize(270, 126))
        self.dockWidget_6.setFeatures(QDockWidget.DockWidgetClosable|QDockWidget.DockWidgetMovable)
        self.dockWidgetContents_6 = QWidget()
        self.dockWidgetContents_6.setObjectName(u"dockWidgetContents_6")
        self.verticalLayout_6 = QVBoxLayout(self.dockWidgetContents_6)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_18 = QVBoxLayout()
        self.verticalLayout_18.setSpacing(0)
        self.verticalLayout_18.setObjectName(u"verticalLayout_18")
        self.horizontalLayout_5 = QHBoxLayout()
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName(u"horizontalLayout_5")
        self.horizontalSpacer_4 = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout_5.addItem(self.horizontalSpacer_4)

        self.toolRescanStorm = QToolButton(self.dockWidgetContents_6)
        self.toolRescanStorm.setObjectName(u"toolRescanStorm")
        self.toolRescanStorm.setIcon(icon5)
        self.toolRescanStorm.setIconSize(QSize(24, 24))
        self.toolRescanStorm.setCheckable(False)
        self.toolRescanStorm.setAutoRaise(True)

        self.horizontalLayout_5.addWidget(self.toolRescanStorm)


        self.verticalLayout_18.addLayout(self.horizontalLayout_5)

        self.tableViewStorm = QTableView(self.dockWidgetContents_6)
        self.tableViewStorm.setObjectName(u"tableViewStorm")
        self.tableViewStorm.setProperty(u"showDropIndicator", False)
        self.tableViewStorm.setTextElideMode(Qt.ElideNone)
        self.tableViewStorm.setSortingEnabled(True)
        self.tableViewStorm.setCornerButtonEnabled(False)
        self.tableViewStorm.horizontalHeader().setStretchLastSection(True)
        self.tableViewStorm.verticalHeader().setVisible(False)

        self.verticalLayout_18.addWidget(self.tableViewStorm)


        self.verticalLayout_6.addLayout(self.verticalLayout_18)

        self.dockWidget_6.setWidget(self.dockWidgetContents_6)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dockWidget_6)
#if QT_CONFIG(shortcut)
        self.label_2.setBuddy(self.regionNameField)
        self.label.setBuddy(self.currentESICharacter)
        self.timeInfo.setBuddy(self.chatListWidget)
#endif // QT_CONFIG(shortcut)
        QWidget.setTabOrder(self.systemNames, self.regionNameField)
        QWidget.setTabOrder(self.regionNameField, self.currentESICharacter)
        QWidget.setTabOrder(self.currentESICharacter, self.clearIntel)
        QWidget.setTabOrder(self.clearIntel, self.rescanIntel)
        QWidget.setTabOrder(self.rescanIntel, self.chatListWidget)
        QWidget.setTabOrder(self.chatListWidget, self.tableViewPOIs)
        QWidget.setTabOrder(self.tableViewPOIs, self.tableViewJBs)
        QWidget.setTabOrder(self.tableViewJBs, self.connectToEveOnline)
        QWidget.setTabOrder(self.connectToEveOnline, self.removeChar)
        QWidget.setTabOrder(self.removeChar, self.tableChars)
        QWidget.setTabOrder(self.tableChars, self.lineEditThera)
        QWidget.setTabOrder(self.lineEditThera, self.toolUseTheraRouting)
        QWidget.setTabOrder(self.toolUseTheraRouting, self.toolRescanThrea)
        QWidget.setTabOrder(self.toolRescanThrea, self.tableViewThera)
        QWidget.setTabOrder(self.tableViewThera, self.toolRescanStorm)
        QWidget.setTabOrder(self.toolRescanStorm, self.tableViewStorm)
        QWidget.setTabOrder(self.tableViewStorm, self.updateAvail)

        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menuChat.menuAction())
        self.menubar.addAction(self.menuSound.menuAction())
        self.menubar.addAction(self.menuRegion.menuAction())
        self.menubar.addAction(self.menuWindow.menuAction())
        self.menubar.addAction(self.menuIntel.menuAction())
        self.menu.addSeparator()
        self.menu.addAction(self.actionShowInfo)
        self.menu.addSeparator()
        self.menu.addAction(self.actionQuitAppl)
        self.menuChat.addAction(self.actionShowChatAvatars)
        self.menuChat.addAction(self.actionChooseChatRooms)
        self.menuChat.addSeparator()
        self.menuSound.addAction(self.actionActivateSound)
        self.menuSound.addAction(self.actionUseSpokenNotifications)
        self.menuSound.addAction(self.actionSoundSetup)
        self.menuSound.addSeparator()
        self.menuRegion.addAction(self.actionCatchRegion)
        self.menuRegion.addAction(self.actionProvidenceRegion)
        self.menuRegion.addAction(self.actionQueriousRegion)
        self.menuRegion.addAction(self.actionProvidenceCatchRegion)
        self.menuRegion.addAction(self.actionProvidenceCatchCompactRegion)
        self.menuRegion.addAction(self.actionWickedcreekScaldingpassRegion)
        self.menuRegion.addAction(self.actionAutoSwitchRegions)
        self.menuRegion.addSeparator()
        self.menuRegion.addAction(self.actionShowJumpBridgeConnectionsOnMap)
        self.menuRegion.addAction(self.actionShowSystemStatisticOnMap)
        self.menuRegion.addAction(self.actionShowADMonMap)
        self.menuRegion.addAction(self.actionUserTheraRoutes)
        self.menuRegion.addSeparator()
        self.menuRegion.addAction(self.actionJumpbridgeData)
        self.menuWindow.addAction(self.actionShowChat)
        self.menuWindow.addAction(self.actionAlwaysOnTop)
        self.menuWindow.addAction(self.actionInvertMouseWheel)
        self.menuWindow.addAction(self.actionFramelessWindow)
        self.menuWindow.addAction(self.menuTransparency.menuAction())
        self.menuWindow.addSeparator()
        self.menuWindow.addAction(self.menuTheme.menuAction())
        self.menuWindow.addAction(self.menuType_Here.menuAction())
        self.menuIntel.addAction(self.menuChars.menuAction())
        self.menuIntel.addAction(self.menuTime.menuAction())
        self.menuIntel.addAction(self.actionClearIntelChat)
        self.menuIntel.addAction(self.actionRescanIntelNow)
        self.menuIntel.addSeparator()
        self.menuTime.addSeparator()

        self.retranslateUi(MainWindow)
        self.rescanIntel.clicked.connect(MainWindow.rescanIntel)
        self.clearIntel.clicked.connect(MainWindow.clearIntelChat)
        self.zoomInButton.clicked.connect(MainWindow.zoomMapIn)
        self.zoomOutButton.clicked.connect(MainWindow.zoomMapOut)
        self.chatLargeButton.clicked.connect(MainWindow.chatLarger)
        self.chatSmallButton.clicked.connect(MainWindow.chatSmaller)
        self.actionRescanIntelNow.triggered.connect(MainWindow.rescanIntel)
        self.searchSystem.toggled.connect(self.systemNames.setVisible)
        self.locateChar.clicked.connect(MainWindow.locateChar)
        MainWindow.current_system_changed.connect(self.lineEditThera.setText)
        self.actionUserTheraRoutes.toggled.connect(MainWindow.setUseThreaRoutes)
        self.actionShowADMonMap.triggered["bool"].connect(MainWindow.changeADMVisibility)
        self.toolRescanThrea.clicked.connect(MainWindow.updateTheraConnections)
        self.actionShowInfo.triggered.connect(MainWindow.showInfo)
        self.actionChooseChatRooms.triggered.connect(MainWindow.showChatroomChooser)
        self.regionNameField.currentTextChanged.connect(MainWindow.regionNameChanged)
        self.currentESICharacter.currentTextChanged.connect(MainWindow.selectESIChar)
        self.actionQuitAppl.triggered.connect(MainWindow.close)
        self.actionShowChatAvatars.triggered["bool"].connect(MainWindow.changeShowAvatars)
        self.mapView.webViewNavigateBackward.connect(MainWindow.navigateBackward)
        self.mapView.webViewNavigateForward.connect(MainWindow.navigateForward)
        MainWindow.region_changed.connect(self.regionNameField.setCurrentText)
        self.toolRescanStorm.clicked.connect(MainWindow.updateObservationsRecords)
        self.clearCache.clicked.connect(MainWindow.clearCacheFile)
        self.actionShowJumpBridgeConnectionsOnMap.toggled.connect(MainWindow.changeJumpbridgesVisibility)
        self.actionShowSystemStatisticOnMap.toggled.connect(MainWindow.changeStatisticsVisibility)
        self.connectToEveOnline.clicked.connect(MainWindow.addNewESICharacter)
        self.actionInvertMouseWheel.toggled.connect(MainWindow.changeInvertMouseWheel)
        self.toolUseTheraRouting.toggled.connect(MainWindow.setUseThreaRoutes)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Spyglass", None))
        self.actionShowInfo.setText(QCoreApplication.translate("MainWindow", u"Info ...", None))
        self.actionAlwaysOnTop.setText(QCoreApplication.translate("MainWindow", u"Always On Top", None))
        self.actionChooseChatRooms.setText(QCoreApplication.translate("MainWindow", u"Choose Chatrooms ...", None))
#if QT_CONFIG(tooltip)
        self.actionChooseChatRooms.setToolTip(QCoreApplication.translate("MainWindow", u"Choose the monitord chat rooms.", None))
#endif // QT_CONFIG(tooltip)
        self.actionShowChatAvatars.setText(QCoreApplication.translate("MainWindow", u"Show Chat Avatars", None))
#if QT_CONFIG(tooltip)
        self.actionShowChatAvatars.setToolTip(QCoreApplication.translate("MainWindow", u"Change the visibility of the avatars inside the chat log window.", None))
#endif // QT_CONFIG(tooltip)
        self.actionShowChat.setText(QCoreApplication.translate("MainWindow", u"Show Tabs", None))
        self.actionActivateSound.setText(QCoreApplication.translate("MainWindow", u"Activate Sound", None))
        self.actionFramelessWindow.setText(QCoreApplication.translate("MainWindow", u"Frameless Main Window", None))
#if QT_CONFIG(tooltip)
        self.actionFramelessWindow.setToolTip(QCoreApplication.translate("MainWindow", u"Frameless Main Window", None))
#endif // QT_CONFIG(tooltip)
        self.actionQuitAppl.setText(QCoreApplication.translate("MainWindow", u"Quit", None))
        self.actionSoundSetup.setText(QCoreApplication.translate("MainWindow", u"Sound Setup...", None))
        self.actionJumpbridgeData.setText(QCoreApplication.translate("MainWindow", u"Jumpbridge Data...", None))
        self.actionUseSpokenNotifications.setText(QCoreApplication.translate("MainWindow", u"Spoken Notifications", None))
#if QT_CONFIG(tooltip)
        self.actionUseSpokenNotifications.setToolTip(QCoreApplication.translate("MainWindow", u"The system text to speak interface reads messages.", None))
#endif // QT_CONFIG(tooltip)
        self.actionAlway_On_Top.setText(QCoreApplication.translate("MainWindow", u"Always On Top", None))
        self.actionTransparency.setText(QCoreApplication.translate("MainWindow", u"Transparency", None))
        self.actionProvidenceRegion.setText(QCoreApplication.translate("MainWindow", u"Providence", None))
        self.actionCatchRegion.setText(QCoreApplication.translate("MainWindow", u"Catch", None))
        self.actionProvidenceCatchRegion.setText(QCoreApplication.translate("MainWindow", u"Perrigen Falls", None))
        self.actionProvidenceCatchCompactRegion.setText(QCoreApplication.translate("MainWindow", u"Pure Blind", None))
        self.actionQueriousRegion.setText(QCoreApplication.translate("MainWindow", u"Querious", None))
        self.actionDefault.setText(QCoreApplication.translate("MainWindow", u"default", None))
        self.actionDarkstyle.setText(QCoreApplication.translate("MainWindow", u"darkstyle", None))
        self.actionRescanIntelNow.setText(QCoreApplication.translate("MainWindow", u"Rescan Now", None))
        self.actionClearIntelChat.setText(QCoreApplication.translate("MainWindow", u"Clear Intel", None))
        self.actionAutoSwitchRegions.setText(QCoreApplication.translate("MainWindow", u"Auto  switch Region", None))
        self.actionWickedcreekScaldingpassRegion.setText(QCoreApplication.translate("MainWindow", u"Tactical Map", None))
        self.actionInvertMouseWheel.setText(QCoreApplication.translate("MainWindow", u"Invert Mouse Wheel", None))
        self.actionUserTheraRoutes.setText(QCoreApplication.translate("MainWindow", u"User Wormholes for routing", None))
#if QT_CONFIG(tooltip)
        self.actionUserTheraRoutes.setToolTip(QCoreApplication.translate("MainWindow", u"User Thera and Thumu connections for routing.", None))
#endif // QT_CONFIG(tooltip)
        self.actionShowADMonMap.setText(QCoreApplication.translate("MainWindow", u"Show ADM on map", None))
#if QT_CONFIG(tooltip)
        self.actionShowADMonMap.setToolTip(QCoreApplication.translate("MainWindow", u"Show the ADM information on the map.", None))
#endif // QT_CONFIG(tooltip)
        self.actionShowSystemStatisticOnMap.setText(QCoreApplication.translate("MainWindow", u"Show system statistic on map.", None))
#if QT_CONFIG(tooltip)
        self.actionShowSystemStatisticOnMap.setToolTip(QCoreApplication.translate("MainWindow", u"Show system statistic on map.", None))
#endif // QT_CONFIG(tooltip)
        self.actionShowJumpBridgeConnectionsOnMap.setText(QCoreApplication.translate("MainWindow", u"Show jump bridge connections on map.", None))
#if QT_CONFIG(tooltip)
        self.frameButton.setToolTip(QCoreApplication.translate("MainWindow", u"Restore WIndow Frame.", None))
#endif // QT_CONFIG(tooltip)
        self.frameButton.setText("")
#if QT_CONFIG(tooltip)
        self.searchSystem.setToolTip(QCoreApplication.translate("MainWindow", u"Select the region by system name.", None))
#endif // QT_CONFIG(tooltip)
        self.searchSystem.setText("")
        self.label_2.setText(QCoreApplication.translate("MainWindow", u"Region", None))
#if QT_CONFIG(tooltip)
        self.regionNameField.setToolTip(QCoreApplication.translate("MainWindow", u"Current Region on Map.", None))
#endif // QT_CONFIG(tooltip)
        self.label.setText(QCoreApplication.translate("MainWindow", u"API Char", None))
#if QT_CONFIG(tooltip)
        self.currentESICharacter.setToolTip(QCoreApplication.translate("MainWindow", u"Current Char used vor ESI.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.locateChar.setToolTip(QCoreApplication.translate("MainWindow", u"Set the focus on the current selected API char.", None))
#endif // QT_CONFIG(tooltip)
        self.locateChar.setText("")
#if QT_CONFIG(tooltip)
        self.zoomInButton.setToolTip(QCoreApplication.translate("MainWindow", u"Zoom into the map.", None))
#endif // QT_CONFIG(tooltip)
        self.zoomInButton.setText("")
#if QT_CONFIG(tooltip)
        self.zoomOutButton.setToolTip(QCoreApplication.translate("MainWindow", u"Zoom out of the map.", None))
#endif // QT_CONFIG(tooltip)
        self.zoomOutButton.setText("")
#if QT_CONFIG(tooltip)
        self.jumpbridgesButton.setToolTip(QCoreApplication.translate("MainWindow", u"Show Ansiblex connections on the map.", None))
#endif // QT_CONFIG(tooltip)
        self.jumpbridgesButton.setText("")
#if QT_CONFIG(tooltip)
        self.statisticsButton.setToolTip(QCoreApplication.translate("MainWindow", u"Show systems statistic on map.", None))
#endif // QT_CONFIG(tooltip)
        self.statisticsButton.setText("")
#if QT_CONFIG(tooltip)
        self.adm_vul_Button.setToolTip(QCoreApplication.translate("MainWindow", u"Show systems vulnerable time and vulnerability occupancy level (ADM)", None))
#endif // QT_CONFIG(tooltip)
        self.adm_vul_Button.setText("")
#if QT_CONFIG(tooltip)
        self.updateAvail.setToolTip(QCoreApplication.translate("MainWindow", u"Download the bew Software from GitHub", None))
#endif // QT_CONFIG(tooltip)
        self.updateAvail.setText(QCoreApplication.translate("MainWindow", u"PushButton", None))
        self.menu.setTitle(QCoreApplication.translate("MainWindow", u"EVE-Spyglass", None))
        self.menuChat.setTitle(QCoreApplication.translate("MainWindow", u"Chatrooms", None))
        self.menuSound.setTitle(QCoreApplication.translate("MainWindow", u"Sound", None))
        self.menuRegion.setTitle(QCoreApplication.translate("MainWindow", u"Navigation", None))
        self.menuWindow.setTitle(QCoreApplication.translate("MainWindow", u"Window", None))
        self.menuTransparency.setTitle(QCoreApplication.translate("MainWindow", u"Transparency", None))
        self.menuTheme.setTitle(QCoreApplication.translate("MainWindow", u"Theme", None))
        self.menuType_Here.setTitle(QCoreApplication.translate("MainWindow", u"Type Here", None))
        self.menuIntel.setTitle(QCoreApplication.translate("MainWindow", u"Intel", None))
        self.menuTime.setTitle(QCoreApplication.translate("MainWindow", u"Intel Time", None))
        self.menuChars.setTitle(QCoreApplication.translate("MainWindow", u"Chars used", None))
        self.dockWidget.setWindowTitle(QCoreApplication.translate("MainWindow", u"Intel", None))
        self.timeInfo.setText(QCoreApplication.translate("MainWindow", u"All Intel (past 20 minutes)", None))
#if QT_CONFIG(tooltip)
        self.clearIntel.setToolTip(QCoreApplication.translate("MainWindow", u"Clear intel chat.", None))
#endif // QT_CONFIG(tooltip)
        self.clearIntel.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
#if QT_CONFIG(tooltip)
        self.rescanIntel.setToolTip(QCoreApplication.translate("MainWindow", u"Rescan intel chat.", None))
#endif // QT_CONFIG(tooltip)
        self.rescanIntel.setText(QCoreApplication.translate("MainWindow", u"...", None))
#if QT_CONFIG(tooltip)
        self.chatLargeButton.setToolTip(QCoreApplication.translate("MainWindow", u"Larger Text.", None))
#endif // QT_CONFIG(tooltip)
        self.chatLargeButton.setText("")
#if QT_CONFIG(tooltip)
        self.chatSmallButton.setToolTip(QCoreApplication.translate("MainWindow", u"Smaller Text.", None))
#endif // QT_CONFIG(tooltip)
        self.chatSmallButton.setText("")
#if QT_CONFIG(tooltip)
        self.showAvatar.setToolTip(QCoreApplication.translate("MainWindow", u"Show the Avatars inside the chat log.", None))
#endif // QT_CONFIG(tooltip)
        self.showAvatar.setText("")
        self.dockWidget_2.setWindowTitle(QCoreApplication.translate("MainWindow", u"POI", None))
        self.dockWidget_3.setWindowTitle(QCoreApplication.translate("MainWindow", u"JB", None))
        self.dockWidget_4.setWindowTitle(QCoreApplication.translate("MainWindow", u"Chars & API", None))
#if QT_CONFIG(tooltip)
        self.connectToEveOnline.setToolTip(QCoreApplication.translate("MainWindow", u"Login with EVE Online.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.removeChar.setToolTip(QCoreApplication.translate("MainWindow", u"Remove API Key for the selected character.", None))
#endif // QT_CONFIG(tooltip)
        self.removeChar.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
        self.m_qLedEveScout.setText("")
        self.m_qEveScout.setText(QCoreApplication.translate("MainWindow", u"Connection to EVE-Scout", None))
        self.m_qLedZKillboarOnline.setText("")
        self.m_qZKillboard.setText(QCoreApplication.translate("MainWindow", u"Webserver connection to zKillboard ", None))
        self.m_qLedOnline.setText("")
        self.m_qPlayerOnline.setText(QCoreApplication.translate("MainWindow", u"(0) Players", None))
        self.label_3.setText(QCoreApplication.translate("MainWindow", u"Clear cache file", None))
#if QT_CONFIG(tooltip)
        self.clearCache.setToolTip(QCoreApplication.translate("MainWindow", u"Clears the cache file, removes non essential items only.", None))
#endif // QT_CONFIG(tooltip)
        self.clearCache.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
        self.dockWidget_5.setWindowTitle(QCoreApplication.translate("MainWindow", u"Thera", None))
#if QT_CONFIG(tooltip)
        self.lineEditThera.setToolTip(QCoreApplication.translate("MainWindow", u"System name used for distance calculation.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.toolUseTheraRouting.setToolTip(QCoreApplication.translate("MainWindow", u"Use Wormhole connections for Route calculatrion.", None))
#endif // QT_CONFIG(tooltip)
        self.toolUseTheraRouting.setText(QCoreApplication.translate("MainWindow", u"...", None))
#if QT_CONFIG(tooltip)
        self.toolRescanThrea.setToolTip(QCoreApplication.translate("MainWindow", u"Fetch the latest Thera and Turnur connections from EvE-Scout.", None))
#endif // QT_CONFIG(tooltip)
        self.toolRescanThrea.setText(QCoreApplication.translate("MainWindow", u"...", None))
        self.dockWidget_6.setWindowTitle(QCoreApplication.translate("MainWindow", u"Storm", None))
#if QT_CONFIG(tooltip)
        self.toolRescanStorm.setToolTip(QCoreApplication.translate("MainWindow", u"Fetch latest storm data from EvE-Scout", None))
#endif // QT_CONFIG(tooltip)
        self.toolRescanStorm.setText(QCoreApplication.translate("MainWindow", u"...", None))
    # retranslateUi

